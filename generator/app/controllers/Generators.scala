package controllers

import io.apibuilder.generator.v0.models.Generator
import io.apibuilder.generator.v0.models.json._
import lib.generator.{CodeGenTarget, CodeGenerator}
import models.generator.spring.service.test.SpringServicesTestGenerator
import play.api.libs.json._
import play.api.mvc._

class Generators extends InjectedController {
  def get(
           key: Option[String] = None,
           limit: Integer = 100,
           offset: Integer = 0
         ) = Action {
    val generators = Generators.targets.
      filter(t => t.codeGenerator.isDefined && t.status != lib.generator.Status.Proposal).
      filter(t => key.isEmpty || key == Some(t.metaData.key)).
      map(t => t.metaData)

    Ok(Json.toJson(generators.drop(offset).take(limit)))
  }

  def getByKey(key: String) = Action {
    Generators.findGenerator(key) match {
      case Some((target, _)) => Ok(Json.toJson(target.metaData))
      case _ => NotFound
    }
  }
}

object Generators {
  def findGenerator(key: String): Option[(CodeGenTarget, CodeGenerator)] = for {
    target <- targets.find(_.metaData.key == key)
    codeGenerator <- target.codeGenerator
  } yield (target -> codeGenerator)

  val targets = Seq(
    CodeGenTarget(
      metaData = Generator(
        key = "bml_lombok",
        name = "BML Lombok Models",
        description = Some("ALPHA Generate Java models from the API description. Uses Javax spring 5 and below compatibility. "),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.lombok.spring.five.LombokPojoClasses)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "bml_lombok_spring_6",
        name = "BML Lombok Models for Spring 6",
        description = Some("BETA Generate Java models from the API description. Uses Jakarta JPA and Validation from Jakarta as opposed to Javax."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.lombok.spring.six.LombokPojoClasses)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "bml_lombok_test",
        name = "BML Lombok Model Tests and Fixtures",
        description = Some("Generate Tests and Fixtures for the POJO's generated by the bml_lombok generator."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.lombok.test.spring.five.BMLLombokTests)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "bml_lombok_test_spring_6",
        name = "BML Lombok Model Tests and Fixtures",
        description = Some("Generate Tests and Fixtures for the POJO's generated by the bml_lombok generator. Uses Jakarta JPA and Validation from Jakarta as opposed to Javax."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.lombok.test.spring.six.BMLLombokTests)
    ),

    CodeGenTarget(
      metaData = Generator(
        key = "bml_openapi",
        name = "BML Openapi 3.0",
        description = Some("Generate an openapi json 3.0.2 sepc with refs and a file name so combination works. Has some additional linting requirements in order to better support conversion and example creation"),
        language = Some("openapi")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.openapi.Openapi)
    ),

    CodeGenTarget(
      metaData = Generator(
        key = "jpa_repository",
        name = "JPA Repository generator",
        description = Some("Generate Spring specific JPA repositories from the API description."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.jpa.spring.five.JPARepository)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "jpa_repository_spring_6",
        name = "JPA Repository generator using Jakarta validation",
        description = Some("Generate Spring specific JPA repositories from the API description. Compatible with Spring 6 and Spring Boot 3 using Jakarta to replace Javax"),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.jpa.spring.six.JPARepository)
    ),

    CodeGenTarget(
      metaData = Generator(
        key = "spring_service",
        name = "Opinionated Spring Service",
        description = Some("Generate Opinionated Spring Service from the API description."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.spring.servcie.spring.five.SpringService)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "spring_service_spring_6",
        name = "Opinionated Spring Service. using Jakarta for validation.",
        description = Some("Generate Opinionated Spring Service from the API description. Compatible with Spring 6 and Spring Boot 3 using Jakarta to replace Javax"),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.spring.servcie.spring.six.SpringService)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "spring_service_testing",
        name = "Opinionated Spring service testing framework generator.",
        description = Some("Generates a testing framework for the Opinionated Spring Service from the API description."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(SpringServicesTestGenerator)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "graphql_schema_generator",
        name = "GraphQL Schema Generator",
        description = Some("Generate a Graphql Schema for use with Graphql-Java."),
        language = Some("GraphQL")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.graphQlSchema.GraphQLSchema)
    ),

    CodeGenTarget(
      metaData = Generator(
        key = "bml_javascript_pojo",
        name = "Opinionated Javascript pojos ",
        description = Some("ALPHA. Generate Opinionated javascript pojos from the API description. Currently only generates enumerations"),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.javascript.pojo.JavascriptPojo)
    ),


    CodeGenTarget(
      metaData = Generator(
        key = "java_client",
        name = "Java WebClient Client Generator ",
        description = Some("BETA Under Development. Generates a java Client for use in a Spring environment based on WebClient."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.java.client.spring.five.JavaClient)
    ),
    CodeGenTarget(
      metaData = Generator(
        key = "java_client_spring_6",
        name = "Java WebClient Client Generator for Spring 6 or not.",
        description = Some("BETA Under Development. Generates a java Client for use in a Spring environment based on WebClient. Compatible with Spring 6 and Spring Boot 3"),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.java.client.spring.six.JavaClient)
    ),

    CodeGenTarget(
      metaData = Generator(
        key = "java_client_resttemplate",
        name = "Java RestTemplate Client Generator",
        description = Some("ALPHA Under Development. Generates a java Client for use in a Spring environment based on RestTemplate."),
        language = Some("Java")
      ),
      status = lib.generator.Status.InDevelopment,
      codeGenerator = Some(models.generator.bml.java.client.resttemplate.JavaRestTemplateClient)
    )

  ).sortBy(_.metaData.key)
}
